import tensorflow as tf
import numpy as np
import os
import cv2

# Define the path to the dataset
dataset_path = r'/content/drive/MyDrive/PlantVillage'

# Define the class labels
class_labels = ['Pepper__bell___Bacterial_spot', 'Pepper__bell___healthy', 'Potato___Early_blight', 'Potato___healthy']

# Define the input image size
img_size = (224, 224)

# Load the images and labels
X = []
y = []
for label_idx, class_label in enumerate(class_labels):
    class_path = os.path.join(dataset_path, class_label)
    for img_file in os.listdir(class_path):
        img_path = os.path.join(class_path, img_file)
        img = cv2.imread(img_path)
        img = cv2.resize(img, img_size)
        img = img.astype('float32') / 255.0
        X.append(img)
        y.append(label_idx)
X = np.array(X)
y = np.array(y)

# Split the dataset into training and validation sets
from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the CNN architecture
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(img_size[0], img_size[1], 3)),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(len(class_labels), activation='softmax')
])

# Compile the model
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val))

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(X_val, y_val)
print('Test accuracy:', test_acc)

# Save the model
model.save('plant_disease_model.h5')

# Load the saved model
model = tf.keras.models.load_model('plant_disease_model.h5')
